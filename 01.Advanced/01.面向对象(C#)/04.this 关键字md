# this 关键字

### this 的四种用法

1. 指代对象本身，可以访问当前对象的成员（区分同名的局部变量和成员变量）.

2. 用 this 串联构造函数. ?

3. 通过 this 实现原始类型的扩展. **Continue**

4. 通过 this 实现索引器，可用于优化程序性能.


### 总结

1. this 关键字引用被访问成员所在的当前实例。

    静态成员函数没有 this 指针。
    
    this关键字可以用来从构造函数，实例方法和实例化访问器中访问成员，但不能用在静态方法中。

    静态属性访问器或者域声明的变量初始化程序中使用 this 关键字，将会产生错误。

2. 在类的构造函数中出现的 this 作为一个值类型表示对正在构造的对象本事的引用。

3. 在类的方法中出现 this 作为一个值类型表示对调用该方法的对象的引用。

4. 在结构的构造函数中出现的 this 作为一个变量类型表示对正在构造的结构的引用。

5. 在结构的方法中出现的 this 作为一个变量类型表示对调用该方法的结构。


```C#
using System;

namespace Test1
{
    class Program
    {
        static void Main(string[] args)
        {
            Student stu = new Student();        //  instance with no parameters
            stu.setScore(100);
            Console.WriteLine("get this student's score is " + stu.getScore());

            stu.setName("Benjamin");
            Console.WriteLine("get this student's score is " + stu.getName());

            Student s = new Student("Song", 22, 100);   // instance with parameters
            Console.WriteLine("\nName : {0} \nAge : {1} \nScore : {2} ", s.getName(), s.getAge(),s.getScore());
        }

        class Student
        {
            string name;
            int age;
            int score;

            // Constructure withou parameters
            public Student()
            {
                Console.WriteLine("Call non parameters constructure");
            }

            // Constructure with parameters
            public Student(string name, int age, int score)
            {
                this.name = name;
                this.age = age;
                this.score = score;
            }
            public void setScore(int score)
            {
                this.score = score;
            }
            public int getScore()
            {
                return score;
            }

            public void setAge(int age)
            {
                this.age = age;
            }
            public int getAge()
            {
                return this.age;
            }

            public void setName(string name_1)
            {
                string name = name_1;   // local variable name
                this.name = name;       // give local variable name's value to memeber variable name 
            }
            
            public string getName()
            {
                return this.name;
            }
        }
    }
}

```

